{"version":3,"sources":["components/searcher/Searcher.js","components/recipes/Recipes.js","App.js","components/recipe/Recipe.js","components/router/Router.js","serviceWorker.js","index.js"],"names":["Searcher","props","react_default","a","createElement","onSubmit","getData","className","type","name","placeholder","aria-describedby","Recipes","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","length","concat","substring","publisher","react_router_dom","to","pathname","state","App","_callee","e","search","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","console","log","stop","searcher_Searcher","this","recipes_Recipes","Component","Recipe","Router","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","router_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.110bb16b.chunk.js","sourcesContent":["import React from 'react';\r\nconst Searcher = (props)=>(\r\n    <form onSubmit={props.getData} >\r\n        <div className=\"col-6 mx-auto input-group mb-3\">\r\n            <div className=\"input-group-append\">\r\n                <button className=\"btn btn-outline-secondary\">Search</button>\r\n            </div>\r\n            <input type=\"text\" name=\"search\" className=\"form-control\" placeholder=\"\"  aria-describedby=\"button-addon2\"/>\r\n        </div>\r\n    </form>\r\n);\r\n\r\nexport default Searcher;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Recipes = (props)=>(\r\n  <div>\r\n    {props.recipes.map((recipe)=>{\r\n      return <div className=\"container mt-2\" key={recipe.recipe_id}>\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-8 col-md-9 col-sm-10 mx-auto\">\r\n              <div className=\"card p-1\" >\r\n                <div className=\"row no-gutters\" >\r\n                  <div className=\"col-lg-4 text-center\">\r\n                    <img  src={recipe.image_url} className=\"img-fluid img-thumbnail\" alt=\"weLove\"/>\r\n                  </div>\r\n                  <div className=\"col-lg-8 text-left mt-2 \">\r\n                    <div className=\"card-body\">\r\n                      <h4 className=\"card-title \">@{ recipe.title.length < 20 ? `${recipe.title}` : `${recipe.title.substring(0, 25)}...` }</h4>\r\n                      <p className=\"card-text\">{ recipe.publisher.length < 20 ? `${recipe.publisher}` : `${recipe.publisher.substring(0, 25)}...` }</p>\r\n                      <button type=\"button\" className=\"btn btn-outline-secondary float-right\">\r\n                        <Link to={{pathname: `/recipe/${recipe.recipe_id}`, state: { recipe: recipe.title }}}> See more </Link>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>   \r\n        </div>}\r\n      )\r\n    }\r\n  </div>\r\n);\r\nexport default Recipes;","import React, {Component} from 'react';\nimport './App.css';\nimport Searcher from './components/searcher/Searcher';\nimport Recipes from './components/recipes/Recipes'\n\n\nconst key = \"d8c18edd0b7973738f811b593d8ad815\";\n\nclass App extends Component{\n  state = {\n    recipes:[]\n  }\n  getData = async (e)=>{\n    const search= e.target.elements.search.value\n    // console.log(search)\n    e.preventDefault()\n    const api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://food2fork.com/api/search?key=${key}&q=${search}&count=15`)\n    const data = await api_call.json()\n    // console.log(data)\n    this.setState({recipes:data.recipes})\n    console.log(this.state.recipes)\n  }\n  render(){\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n            <h1 className=\"App-title\">Recipe book</h1>\n          </header>\n       <Searcher getData={this.getData}/>\n       <Recipes recipes={this.state.recipes}/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Recipe = () => (<div>Funciona la ruta, aqui iran los detalles de la receta YUMI!</div>)\r\n\r\n\r\nexport default Recipe;\r\n","import React from 'react';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport App from '../../App'\r\nimport Recipe from '../recipe/Recipe'\r\n\r\nconst Router = ()=>(\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/\" component={App} exact/>\r\n            <Route path=\"/recipe/:id\" component={Recipe}/>\r\n        </Switch>\r\n    </BrowserRouter>\r\n)\r\n\r\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from './components/router/Router';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router/>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}